@page "/"
@inherits ComponentBase
<PageTitle >Index</PageTitle>






<label for="minutes" >Enter minutes:</label>
<input type="number" id="minutes" style="border-radius:10px"
            @bind="minutes" placeholder="daqiqa kiriting"/>


<button @onclick="() => StartTimer()" disabled="@timerRunning" 
    style="background-color:green; color:white; border-radius:10px;
     margin-top:10px">Start Timer</button>
<button @onclick="PauseResumeTimer" 
    style="border-radius:10px; background-color:yellow"
    disabled="@(!timerRunning)">@(timerPaused ? "Resume" : "Pause") Timer</button>
<button @onclick="StopTimer" 
    style="border-radius:10px; background-color:red;"
    disabled="@(!timerRunning)">Stop Timer</button>
<button @onclick="RefreshTimer" 
    style="border-radius:10px; background-color:darkgrey"
    disabled="@(!timerRunning || timerPaused)">Refresh Timer</button>

<p  style="font-size:360px; cursor:cell;  height:637.2px"> @formattedTime</p>




@code {
    private int minutes = 0;
    private TimeSpan remainingTime;
    private string formattedTime => remainingTime.ToString(@"hh\:mm\:ss");
    private bool timerRunning = false;
    private bool timerPaused = false;
    private System.Threading.Timer timer;

    private void StartTimer()
    {
        if (!timerRunning && minutes > 0)
        {
            remainingTime = TimeSpan.FromMinutes(minutes);
            timer = new System.Threading.Timer(UpdateTimer, null, 0, 1000);
            timerRunning = true;
            InvokeAsync(StateHasChanged);
        }
    }

    private void UpdateTimer(object state)
    {
        if (remainingTime.TotalSeconds > 0 && !timerPaused)
        {
            remainingTime = remainingTime.Subtract(TimeSpan.FromSeconds(1));
            InvokeAsync(StateHasChanged);
        }
        else if (remainingTime.TotalSeconds == 0)
        {
            StopTimer();
        }
    }

    private void PauseResumeTimer()
    {
        timerPaused = !timerPaused;
        InvokeAsync(StateHasChanged);
    }

    private void StopTimer()
    {
        timer.Dispose();
        timerRunning = false;
        remainingTime = TimeSpan.Zero;
        InvokeAsync(StateHasChanged);
    }

    private void RefreshTimer()
    {
        StopTimer();
        StartTimer();
    }
}